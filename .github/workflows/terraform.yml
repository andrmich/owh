name: Terraform

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  terraform-plan:
    name: terraform-plan
    runs-on: ubuntu-latest
    env:
      TF_VAR_pub_key: ${{ secrets.KEY_PUB }}
    steps:

    - name: Checkout Repository
      uses: actions/checkout@master

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.9

    - name: Terraform Fmt
      id: fmt
      run: terraform fmt -check -diff
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: false

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: false
  terraform-apply:
    name: terraform-apply
    needs: terraform-plan
    runs-on: ubuntu-latest
    env:
      TF_VAR_pub_key: ${{ secrets.KEY_PUB }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.9

      - name: Terraform Init
        id: init
        run: terraform init
        continue-on-error: false

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        continue-on-error: false
  ansible:
    name: ansible
    needs: terraform-apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Copy files to the test website with the AWS CLI
        run: |
           echo "IP_PUB=$(aws ec2 describe-instances --filters 'Name=tag:Instance,Values=Bastion' --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)" >> $GITHUB_ENV

      - name: Create a file from secret
        run:  echo ${{ secrets.KEY_PRIV }} | base64 -d > key

      - name: Install additional packages to ansibe pipx
        run: pipx inject ansible-base boto3

      - name: Install roles
        run: ansible-galaxy install -r requirements.yml

      - name: Run ansible playbook
        run: |
           ansible-playbook -i inventories/dynamic_aws_ec2.yml --ssh-extra-args "-o ProxyCommand=\"ssh -i key -o IdentitiesOnly=yes -W %h:%p -q ubuntu@$IP_PUB\"" --private-key key provision.yml
